//
//  NoteInteractor.swift
//  MirianMaglakelidze#26
//
//  Created by Admin on 8/26/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NoteBusinessLogic {
    func fetchNote(request: Note.CoreData.Request)
    func removeNote(request: Note.RemoveNote.Request)
    func setNote(_ note: MyNote)
}

protocol NoteDataStore {
    var note: MyNote? { get set }
}

class NoteInteractor: NoteBusinessLogic, NoteDataStore {
    var presenter: NotePresentationLogic?
    var worker: NoteWorker?
    var note: MyNote? = MyNote()
    
    // MARK: Do something
    
    func fetchNote(request: Note.CoreData.Request) {
        worker = NoteWorker()
        worker?.getNoteFromCorData(complition: { [weak self] result in
            let response = Note.CoreData.Response(result: result)
            self?.presenter?.presentFetchResult(response: response)
        })
    }
    
    func removeNote(request: Note.RemoveNote.Request) {
        AppDelegatConstant.context.delete(request.note)
        do {
            try AppDelegatConstant.context.save()
            presenter?.presentDeleteResult(respons: Note.RemoveNote.Response(error: nil))
        } catch {
            let respons = Note.RemoveNote.Response(error: error)
            presenter?.presentDeleteResult(respons: respons)
        }
    }
    func setNote(_ note: MyNote) {
        self.note = note
    }

}
