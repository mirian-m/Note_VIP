//
//  NoteViewController.swift
//  MirianMaglakelidze#26
//
//  Created by Admin on 8/26/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NoteDisplayLogic: AnyObject {
    func displayNote(viewModel: Note.CoreData.ViewModel)
    func displayDeleteError(viewModel: Note.RemoveNote.ViewModel)
}

class NoteViewController: UITableViewController, NoteDisplayLogic {
    
    var interactor: NoteBusinessLogic?
    var router: (NSObjectProtocol & NoteRoutingLogic & NoteDataPassing)?
    private var notes: [MyNote] = []
    private lazy var longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress))
    private var tappedCellIndex: Int?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = NoteInteractor()
        let presenter = NotePresenter()
        let router = NoteRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Note"
        tableView.addGestureRecognizer(longPressGesture)
        navigationItem.rightBarButtonItems = [
            UIBarButtonItem(image: UIImage(systemName: "doc.fill.badge.plus")?
                                .withTintColor(UIColor.black,
                                               renderingMode: .alwaysOriginal),
                            style: .done, target: self, action: #selector(addNote)),
            
        ]
        getNotes()
    }
    
    @objc func addNote() {
        router?.routToAdd(segue: nil)
    }

    override func viewWillAppear(_ animated: Bool) {
        super .viewWillAppear(true)
        getNotes()
    }
    
    // MARK: Do something
    
    func getNotes() {
        let request = Note.CoreData.Request()
        interactor?.fetchNote(request: request)
    }
    
    func displayNote(viewModel: Note.CoreData.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            guard let notes = viewModel.myNote else {
                self?.showAlert()
                return
            }
            self?.notes = notes
            self?.tableView.reloadData()
        }
    }
    
    func displayDeleteError(viewModel: Note.RemoveNote.ViewModel) {
        if viewModel.error != nil {
            showAlert()
            return
        }
        tableView.reloadData()
    }

    @objc private func handleLongPress(sender: UILongPressGestureRecognizer) {
        if sender.state == .began {
            let touchPoint = sender.location(in: tableView)
            if let indexPath = tableView.indexPathForRow(at: touchPoint) {
                tappedCellIndex = indexPath.row
            }
        }
        showActionSheet()
    }
    
    //    MARK: - ACTIONSHEET FUNC
    
    func showActionSheet() {
        let alert = UIAlertController(title: "", message: "Please Select an Option", preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: "Edit", style: .default , handler:{ [weak self] _ in
            self?.interactor?.setNote(self!.notes[self!.tappedCellIndex!])
            self?.tabBarController?.hidesBottomBarWhenPushed = true
            self?.router?.routeToEdit(segue: nil)
        }))
        
        alert.addAction(UIAlertAction(title: "Delete", style: .destructive , handler:{ [weak self] _ in
            let requset = Note.RemoveNote.Request(note: self!.notes[self!.tappedCellIndex!])
            self!.notes.remove(at: self!.tappedCellIndex!)
            self?.interactor?.removeNote(request: requset)
        }))
        
        alert.addAction(UIAlertAction(title: "Dismiss", style: .cancel, handler: nil))
        
        self.present(alert, animated: true, completion: {
            print("completion block")
        })
    }

    func showAlert(){
        let aler = UIAlertController(title: "Error", message: "Cannot get data from core Data", preferredStyle: .alert)
        let action = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        aler.addAction(action)
        present(aler, animated: true, completion: nil)
    }
}

extension NoteViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        notes.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: NoteTableViewCell.identifier, for: indexPath) as? NoteTableViewCell else { return UITableViewCell()}
        let currentNote = notes[indexPath.row]
        cell.configurCell(with: currentNote)
        return cell
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        TableViewConstant.heightForRow
    }
}

